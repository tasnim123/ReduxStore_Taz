{"ast":null,"code":"var _jsxFileName = \"/Users/tasnimrahat/Desktop/BootCamp/Redux Store/client/src/pages/Detail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { connect, useSelector } from 'react-redux';\nimport Cart from '../components/Cart';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\nimport { updateProducts, updateCartQuantity, addToCart, removeFromCart } from '../store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Detail(props) {\n  _s();\n\n  const {\n    updateProducts,\n    updateCartQuantity,\n    addToCart,\n    removeFromCart\n  } = props;\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const products = useSelector(state => state.products);\n  const cart = useSelector(state => state.cart);\n  useEffect(() => {\n    // already in global store\n    if (products) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } // retrieved from server\n    else if (data) {\n      updateProducts(data.products);\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        updateProducts(indexedProducts);\n      });\n    }\n  }, [products, data, loading, updateProducts, id]);\n\n  const handleAddToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      updateCartQuantity(id, parseInt(itemInCart.purchaseQuantity) + 1);\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      addToCart({ ...currentProduct,\n        purchaseQuantity: 1\n      });\n      idbPromise('cart', 'put', { ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const handleRemoveFromCart = () => {\n    removeFromCart(currentProduct._id);\n    idbPromise('cart', 'delete', { ...currentProduct\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentProduct && cart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-1\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"\\u2190 Back to Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentProduct.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), \"$\", currentProduct.price, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddToCart,\n          children: \"Add to Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !cart.find(p => p._id === currentProduct._id),\n          onClick: handleRemoveFromCart,\n          children: \"Remove from Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `/images/${currentProduct.image}`,\n        alt: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: spinner,\n      alt: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 24\n    }, this) : null, /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Detail, \"0O1HoapZ6e+DfjCBBj3tzMr27bQ=\", false, function () {\n  return [useParams, useQuery, useSelector, useSelector];\n});\n\n_c = Detail;\nconst mapDispatchToProps = {\n  updateCartQuantity,\n  updateProducts,\n  addToCart,\n  removeFromCart\n};\nexport default connect(null, mapDispatchToProps)(Detail);\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/tasnimrahat/Desktop/BootCamp/Redux Store/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","connect","useSelector","Cart","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","QUERY_PRODUCTS","idbPromise","spinner","updateProducts","updateCartQuantity","addToCart","removeFromCart","Detail","props","id","currentProduct","setCurrentProduct","loading","data","products","state","cart","find","product","_id","forEach","then","indexedProducts","handleAddToCart","itemInCart","cartItem","parseInt","purchaseQuantity","handleRemoveFromCart","name","description","price","p","image","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { connect, useSelector } from 'react-redux';\nimport Cart from '../components/Cart';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\nimport { updateProducts, updateCartQuantity, addToCart, removeFromCart } from '../store/actions';\n\nfunction Detail(props) {\n    const { updateProducts, updateCartQuantity, addToCart, removeFromCart } = props;\n    const { id } = useParams();\n\n    const [currentProduct, setCurrentProduct] = useState({});\n\n    const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n    const products = useSelector((state) => state.products);\n    const cart = useSelector((state) => state.cart);\n\n    useEffect(() => {\n        // already in global store\n        if (products) {\n            setCurrentProduct(products.find((product) => product._id === id));\n        }\n        // retrieved from server\n        else if (data) {\n            updateProducts(data.products);\n            data.products.forEach((product) => {\n                idbPromise('products', 'put', product);\n            });\n        }\n        // get cache from idb\n        else if (!loading) {\n            idbPromise('products', 'get').then((indexedProducts) => {\n                updateProducts(indexedProducts);\n            });\n        }\n    }, [products, data, loading, updateProducts, id]);\n\n    const handleAddToCart = () => {\n        const itemInCart = cart.find((cartItem) => cartItem._id === id);\n        if (itemInCart) {\n            updateCartQuantity(id, parseInt(itemInCart.purchaseQuantity) + 1);\n            idbPromise('cart', 'put', {\n                ...itemInCart,\n                purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n            });\n        } else {\n            addToCart({ ...currentProduct, purchaseQuantity: 1 });\n            idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n        }\n    };\n\n    const handleRemoveFromCart = () => {\n        removeFromCart(currentProduct._id);\n        idbPromise('cart', 'delete', { ...currentProduct });\n    };\n\n    return (\n        <>\n            {currentProduct && cart ? (\n                <div className=\"container my-1\">\n                    <Link to=\"/\">← Back to Products</Link>\n\n                    <h2>{currentProduct.name}</h2>\n\n                    <p>{currentProduct.description}</p>\n\n                    <p>\n                        <strong>Price:</strong>${currentProduct.price}{' '}\n                        <button onClick={handleAddToCart}>Add to Cart</button>\n                        <button\n                            disabled={!cart.find((p) => p._id === currentProduct._id)}\n                            onClick={handleRemoveFromCart}\n                        >\n                            Remove from Cart\n                        </button>\n                    </p>\n\n                    <img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n                </div>\n            ) : null}\n            {loading ? <img src={spinner} alt=\"loading\" /> : null}\n            <Cart />\n        </>\n    );\n}\n\nconst mapDispatchToProps = { updateCartQuantity, updateProducts, addToCart, removeFromCart };\nexport default connect(null, mapDispatchToProps)(Detail);\n"]},"metadata":{},"sourceType":"module"}