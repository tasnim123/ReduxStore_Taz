{"ast":null,"code":"import { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions'; // TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n    // Your comment here\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      {\n        const prevCarts = state.cart || [];\n        return { ...state,\n          cart: [...prevCarts, ...action.products]\n        };\n      }\n    // TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n    // Your comment here\n\n    case UPDATE_CART_QUANTITY:\n      {\n        return { ...state,\n          cartOpen: true,\n          cart: state.cart.map(product => {\n            if (action._id === product._id) {\n              product.purchaseQuantity = action.purchaseQuantity;\n            }\n\n            return product;\n          })\n        };\n      }\n    // TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n    // Your comment here\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      {\n        return { ...state,\n          categories: [...action.categories]\n        };\n      }\n\n    case UPDATE_CURRENT_CATEGORY:\n      {\n        return { ...state,\n          currentCategory: action.currentCategory\n        };\n      }\n    // TODO: Add a comment describing what the default case is for\n    // Your comment here\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/tasnimrahat/Desktop/BootCamp/Unsolved copy/client/src/store/reducers.js"],"names":["UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","cartOpen","cart","product","prevCarts","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory"],"mappings":"AAAA,SACIA,eADJ,EAEIC,WAFJ,EAGIC,oBAHJ,EAIIC,gBAJJ,EAKIC,oBALJ,EAMIC,iBANJ,EAOIC,uBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUO,WAVP,C,CAYA;;AACA,MAAMC,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AACA,SAAKZ,eAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFP,OAAP;;AAKJ,SAAKZ,WAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHI,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,IAAI,EAAE,CAAC,GAAGL,KAAK,CAACK,IAAV,EAAgBJ,MAAM,CAACK,OAAvB;AAHH,OAAP;;AAMJ,SAAKZ,oBAAL;AAA2B;AACvB,cAAMa,SAAS,GAAGP,KAAK,CAACK,IAAN,IAAc,EAAhC;AACA,eAAO,EACH,GAAGL,KADA;AAEHK,UAAAA,IAAI,EAAE,CAAC,GAAGE,SAAJ,EAAe,GAAGN,MAAM,CAACE,QAAzB;AAFH,SAAP;AAIH;AACD;AACA;;AACA,SAAKX,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGQ,KADA;AAEHI,UAAAA,QAAQ,EAAE,IAFP;AAGHC,UAAAA,IAAI,EAAEL,KAAK,CAACK,IAAN,CAAWG,GAAX,CAAgBF,OAAD,IAAa;AAC9B,gBAAIL,MAAM,CAACQ,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC5BH,cAAAA,OAAO,CAACI,gBAAR,GAA2BT,MAAM,CAACS,gBAAlC;AACH;;AACD,mBAAOJ,OAAP;AACH,WALK;AAHH,SAAP;AAUH;AAED;AACA;;AACA,SAAKb,gBAAL;AACI,UAAIkB,QAAQ,GAAGX,KAAK,CAACK,IAAN,CAAWO,MAAX,CAAmBN,OAAD,IAAa;AAC1C,eAAOA,OAAO,CAACG,GAAR,KAAgBR,MAAM,CAACQ,GAA9B;AACH,OAFc,CAAf;AAIA,aAAO,EACH,GAAGT,KADA;AAEHI,QAAAA,QAAQ,EAAEO,QAAQ,CAACE,MAAT,GAAkB,CAFzB;AAGHR,QAAAA,IAAI,EAAEM;AAHH,OAAP;;AAMJ,SAAKd,UAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHI,QAAAA,QAAQ,EAAE,KAFP;AAGHC,QAAAA,IAAI,EAAE;AAHH,OAAP;;AAMJ,SAAKP,WAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHI,QAAAA,QAAQ,EAAE,CAACJ,KAAK,CAACI;AAFd,OAAP;;AAKJ,SAAKT,iBAAL;AAAwB;AACpB,eAAO,EACH,GAAGK,KADA;AAEHc,UAAAA,UAAU,EAAE,CAAC,GAAGb,MAAM,CAACa,UAAX;AAFT,SAAP;AAIH;;AAED,SAAKlB,uBAAL;AAA8B;AAC1B,eAAO,EACH,GAAGI,KADA;AAEHe,UAAAA,eAAe,EAAEd,MAAM,CAACc;AAFrB,SAAP;AAIH;AACD;AACA;;AACA;AACI,aAAOf,KAAP;AAhFR;AAkFH,CAnFD;;AAqFA,eAAeD,OAAf","sourcesContent":["import {\n    UPDATE_PRODUCTS,\n    ADD_TO_CART,\n    UPDATE_CART_QUANTITY,\n    REMOVE_FROM_CART,\n    ADD_MULTIPLE_TO_CART,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    CLEAR_CART,\n    TOGGLE_CART,\n} from './actions';\n\n// TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\nconst reducer = (state = {}, action) => {\n    switch (action.type) {\n        // TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n        // Your comment here\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product],\n            };\n\n        case ADD_MULTIPLE_TO_CART: {\n            const prevCarts = state.cart || [];\n            return {\n                ...state,\n                cart: [...prevCarts, ...action.products],\n            };\n        }\n        // TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n        // Your comment here\n        case UPDATE_CART_QUANTITY: {\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map((product) => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                }),\n            };\n        }\n\n        // TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n        // Your comment here\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter((product) => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState,\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: [],\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen,\n            };\n\n        case UPDATE_CATEGORIES: {\n            return {\n                ...state,\n                categories: [...action.categories],\n            };\n        }\n\n        case UPDATE_CURRENT_CATEGORY: {\n            return {\n                ...state,\n                currentCategory: action.currentCategory,\n            };\n        }\n        // TODO: Add a comment describing what the default case is for\n        // Your comment here\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}